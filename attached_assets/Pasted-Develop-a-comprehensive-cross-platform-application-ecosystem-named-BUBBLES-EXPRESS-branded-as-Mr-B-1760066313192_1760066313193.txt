Develop a comprehensive, cross-platform application ecosystem named BUBBLES EXPRESS (branded as Mr Bubbles Express), modeled after the UberEats user experience but tailored for an end-to-end Uber-style on-demand laundry collection, processing, and delivery network. Built initially for the Irish market with expansion in mind, the system will integrate mobile apps for customers and drivers, web-based Shop and Admin portals, QR-based item tracking, policy-driven revenue splits, label printing, anti-fraud measures, automated payouts, and VAT-compliant invoices. Start with a unified platform incorporating all roles via role-based access (e.g., login as customer, driver, shop staff, or admin), with a public site/booking widget for initial order intake. Include self-service onboarding: Anyone can sign up as a driver via the app/public site (undergoing verification—e.g., ID/license upload, background check via integrated services—followed by a mandatory "Bubbles Crash Course" module with quizzes/tutorials on app usage, safety, and service standards; upon completion, certified drivers receive branded clothing and equipment via partnered logistics, unlocking job access). Similarly, existing launderettes can apply for franchising Bubbles Express through a dedicated portal flow (submitting business details, capacity proofs, and compliance docs for review; approved franchises join as origin/processing shops, gaining access to the network for revenue-sharing expansion across Ireland). The Admin Portal will be restricted to verified owners only (via multi-factor auth and owner-specific verification), providing a secure dashboard for monitoring all transactions (completed or pending, with filters/search by status, date, amount, user), full records of drivers and customers (e.g., profiles, activity logs, contact details, compliance history), and safe data collection practices (encrypted storage, audit-logged access, GDPR-compliant export/deletion tools).
Core Requirements:

Product Surfaces:

Customer Mobile App: Schedule pickups/deliveries, select services (e.g., wash, dry clean, press), upload order details/photos, receive real-time notifications (e.g., weight/pricing uploads, warehouse arrival, processing ETAs, delivery ETAs), track full order states via interactive map (live GPS for driver during pickup/delivery with ETA), view order history with bag/item breakdowns and charges, and complete secure in-app payments (integrate Stripe for cards/wallets, with dynamic per-kilo pricing and VAT at 13.5% for laundry/23% for dry cleaning).
Driver Mobile App: Receive job assignments, view pickup/drop-off addresses with turn-by-turn navigation (Google Maps/Mapbox), integrate BLE (Bluetooth Low Energy) for label printing (ZPL/EPL format), support offline mode for pickups (sync on reconnect), weigh bags at collection to calculate euro value per kilo (upload to apps for approval/payment), print QR labels for bags/items (showing Order#, Bag#, Customer, Address, Service, Due Date, QR payload like mrbl://o/{order_id} or mrbl://b/{bag_id}?o={order_id}&seq={n}), update states via QR/barcode scans (camera/Expo Barcode Scanner), capture photo+geo+signature for handoffs, and access earnings dashboard with reconciliation reports. Include onboarding flow: Signup → Verification (ID upload/background check) → Bubbles Crash Course (interactive tutorials/quizzes) → Certification (auto-dispatch clothing/equipment) → Active status.
Shop Portal (Web): Handle intake (scan incoming bag labels to update to AT_ORIGIN_SHOP, log weights/services), quality control (QC spot-checks with scan count validation vs. line items), subcontracting (route to processing shops with status updates), processing workflow (WASH/DRY/PRESS states with timestamps), packing (update to PACKED), and outbound dispatch (notify drivers for OUT_FOR_DELIVERY). Generate web PDF labels for shop use. Add franchising signup: Launderettes submit applications (business verification, capacity assessment) for network integration as franchise partners, enabling Irish-wide expansion with revenue splits.
Admin Portal (Web, Owners-Only Access): Restricted to verified owners via enhanced auth (MFA, IP whitelisting if needed). Core dashboard for viewing every transaction (completed/pending lists with real-time filters by status/date/amount/user, drill-down to details like splits/invoices), all driver and customer records (searchable profiles with activity history, certification status, contact/compliance data, secure export options), policy management (e.g., revenue splits by service/shop-pair), automated payouts processing, immutable audit trails (event logs per order/bag/item), dispute handling (evidence packs with photos/scans), reconciliation CSVs/PDFs generation per shop/driver, and analytics dashboards. Ensure safe data collection: All views/logs encrypted at rest/transit, access audited with alerts, GDPR tools for data subject requests (view/delete/portability).
Public Site/Booking Widget: Embeddable web form for initial order creation (POST /orders), feeding into the core model. Include prominent CTAs for driver signup (linking to crash course) and launderette franchising (application form).


Core Model & States:

Hierarchical structure: Order → Bag(s) → Item(s), with immutable event trails logged via scans/APIs.
State transitions: CREATED (booking) → PICKED_UP (driver scan + weigh/label/print) → AT_ORIGIN_SHOP (shop intake scan) → SUBCONTRACTED? (optional routing) → AT_PROCESSING_SHOP → WASH/DRY/PRESS (processing logs) → QC (spot-checks) → PACKED (final label scan) → OUT_FOR_DELIVERY (driver outbound scan + GPS share) → DELIVERED (door-side scan + signature) → CLOSED (payment finalization + invoice).
QR payloads for deep-linking: mrbl://o/{order_id} (order view), mrbl://b/{bag_id}?o={order_id}&seq={n} (bag scan), mrbl://i/{item_id} (item-level tracking).


Key Features:

Label and Scanning Workflow: Full QR scan chain (POST /scan) for anti-fraud (ghost-item guard: scan count must match line items; duplicate-scan windows; two-party handoffs with photo+geo+signature). Drivers: Weigh/label/print at pickup (BLE thermal printer integration), upload weight-based pricing (e.g., €X per kg). Shops: Scan on arrival (notify customer with processing ETA), QC/pack scans. Drivers: Outbound scan (share GPS/ETA on customer map), final delivery scan (complete transaction, trigger receipt/invoice).
Revenue Split (Policy-Driven): POST /splits/calculate for dynamic EUR splits (default: Origin Shop 20%, Processing Shop 55%, Driver 10%, Platform 15%; overrides by service/shop-pair). Rounding: HALF_UP_2DP; platform minimum cents; splits only on full scan chain. Integrate VAT (IE rates: 13.5%/23%) for POST /orders/{id}/invoice generation, with franchise-specific adjustments for expansion.
Anti-Fraud & Reconciliation: Anomaly detection (e.g., unusual job patterns), dispute workflow (evidence packs auto-generated), QC spot-checks. Generate CSVs/PDFs for shop/driver reconciliation.
Onboarding & Expansion: Driver certification flow (verification APIs, e-learning module for crash course, equipment fulfillment via third-party integration). Franchising pipeline (application review queue in admin, automated contracts/onboarding for new launderettes to scale network across Ireland).
Admin Transaction & Records Management: Owners-only dashboard with comprehensive views of all transactions (real-time pending/completed queues, exportable reports) and user records (drivers/customers: profiles, histories, secure anonymized queries), backed by safe data practices (role-based access controls, encryption, automated backups, compliance logging).
Real-time tracking: Live GPS map for customers (Expo Location/react-native-maps), push notifications (Firebase) for all state changes, including certification milestones.
Order management: Seamless E2E flow with offline sync for drivers.
Payments & Payouts: In-app checkout with saved methods; automated admin payouts balancing to ±1c on 100 orders.
UI/UX: UberEats-inspired—bottom tabs, swipes, dark/light mode, animations for scans/tracking/printing/onboarding flows/dashboard interactions.
Security: Auth (email/phone/OTP/MFA for owners), encryption, GDPR compliance.


Technical Stack for Replit Compatibility and App Store Deployment:

Mobile: React Native with Expo CLI for cross-platform iOS/Android builds (TestFlight/Internal distribution).
Web Portals & Public Widget: Next.js for Shop/Admin portals and booking widget (use role guards for owners-only Admin routes).
Backend: Node.js/NestJS (or FastAPI via Python if preferred) for APIs (e.g., POST /orders, POST /scan, POST /orders/{id}/bags, POST /orders/{id}/subcontract, POST /splits/calculate, POST /orders/{id}/invoice; Admin: POST /policies/split, GET /audit, GET /transactions, GET /users/drivers, GET /users/customers with pagination/search/filters). Use PostgreSQL (via Supabase or Replit DB) for core DB/migrations (include tables for transactions, user records with encryption fields); Redis for caching; Firebase for real-time/notifications (adapt Kafka/Streams via WebSockets for MVP).
Storage: S3-compatible (Firebase Storage) for photos/labels.
Other: Expo Barcode Scanner for QR; react-native-ble-plx for BLE printing; pdf-lib for web PDFs/ZPL generation; integrate e-learning libs (e.g., react-native-webview for crash course videos/quizzes); use libraries like bcrypt/jwt for enhanced owner auth.
Monitoring: Basic OpenTelemetry logging; Grafana via Replit integrations if feasible.
Analytics: ClickHouse/BigQuery hooks for order events (MVP: Firebase Analytics).
Deployment: Docker for backend (Replit supports); Expo EAS for mobile APKs/IPAs to Google Play/Apple App Store. Note: Full k8s/Terraform for prod scaling post-MVP.



Development in Replit:

Create a monorepo Replit project: Use templates for React Native (Expo), Next.js (web), and Node.js (backend). Structure: /mobile (RN apps with role-based screens: e.g., CustomerHome, DriverScan, MapTracker, OnboardingCrashCourse), /web (Next.js for portals/widget, including franchise signup form and owners-only Admin dashboard with transaction/user record views), /backend (NestJS APIs + DB migrations), /shared (types/models for order/bag/item states, driver/franchise schemas, transaction/user records), /docs (README, env vars, printing guide, runbooks, Postman collection, architecture diagram).
Incorporate attached documents/folders: Use wireframes for UI (scan/print flows, onboarding screens, admin dashboard layouts), specs for business logic (states/splits/VAT, certification/franchising, transaction monitoring), API schemas for endpoints.
Seeded Demo: Initialize with 3 shops (origin/processing pairs) in DB for testing 5 split scenarios; add sample driver/franchise accounts for onboarding flows, plus mock transactions/user records for admin dashboard testing.
Build and Test: expo start for mobile preview; npm run dev for web/backend. Unit/integration tests (Jest); E2E flow validation (labels/scans/offline sync, crash course completion, franchise approval, admin transaction queries with security checks); payout accuracy (±1c); VAT invoices. Ensure app store compliance (permissions for camera/location/BLE, privacy policy).
MVP Acceptance: Full E2E with labels/scans; correct splits/invoices; offline pickup sync; seeded demo runnable; driver certification and franchise signup functional; owners-only admin access with secure transaction/user data views.

Ensure production-readiness: <100MB mobile bundles, accessibility (VoiceOver), no hardcoded secrets. Export from Replit for Expo cloud builds and web hosting (Vercel/Netlify). Provide comprehensive docs in repo.